version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: cmsvs_db_prod
    environment:
      POSTGRES_DB: cmsvs_db
      POSTGRES_USER: cmsvs_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/db:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - cmsvs_network
    restart: unless-stopped
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cmsvs_user -d cmsvs_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CMSVS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cmsvs_app_prod
    environment:
      DATABASE_URL: postgresql://cmsvs_user:${DB_PASSWORD}@db:5432/cmsvs_db
      SECRET_KEY_FILE: /run/secrets/secret_key
      ADMIN_PASSWORD_FILE: /run/secrets/admin_password
      ENVIRONMENT: production
      DEBUG: "False"
      FORCE_HTTPS: "True"
      SECURE_COOKIES: "True"
      RATE_LIMIT_ENABLED: "True"
      LOG_LEVEL: WARNING
      LOG_FORMAT: json
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./db_backups:/app/db_backups:rw
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only (behind reverse proxy)
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cmsvs_network
    restart: unless-stopped
    secrets:
      - secret_key
      - admin_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: cmsvs_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl:ro
      - ./uploads:/app/uploads:ro  # Serve static files
    depends_on:
      - app
    networks:
      - cmsvs_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: cmsvs_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - cmsvs_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: cmsvs_backup_prod
    environment:
      PGPASSWORD_FILE: /run/secrets/db_password
    volumes:
      - ./backups/db:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - db
    networks:
      - cmsvs_network
    restart: "no"
    secrets:
      - db_password
    command: ["sh", "-c", "while true; do sleep 86400; /backup.sh; done"]
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cmsvs_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  db_password:
    file: ./secrets/db_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  admin_password:
    file: ./secrets/admin_password.txt
